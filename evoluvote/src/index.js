#!/usr/bin/env node
import { chromium } from 'playwright';
import { config } from 'dotenv';
import { readFileSync } from 'fs';
import { sendDiscordNotification, log, formatDate } from './utils.js';

// Charger les variables d'environnement
config();

// Charger la configuration
const configData = JSON.parse(readFileSync('./config.json', 'utf8'));

// R√©cup√©rer la t√¢che depuis les variables d'environnement
const TASK = process.env.TASK || 'vote90';
const PLAYER_NAME = process.env.PLAYER_NAME;
const HEADLESS = process.env.HEADLESS === 'true';

if (!PLAYER_NAME) {
  log('‚ùå Erreur: PLAYER_NAME non d√©fini dans .env', 'error');
  process.exit(1);
}

// Configuration de la t√¢che actuelle
const siteConfig = configData.sites[TASK];
if (!siteConfig) {
  log(`‚ùå Erreur: T√¢che "${TASK}" non trouv√©e dans config.json`, 'error');
  process.exit(1);
}

/**
 * Tente de trouver et cliquer un √©l√©ment avec plusieurs s√©lecteurs
 */
async function tryMultipleSelectors(page, selectors, action = 'click') {
  for (const selector of selectors) {
    try {
      const element = await page.$(selector);
      if (element) {
        if (action === 'fill') {
          await element.fill(PLAYER_NAME);
          log(`‚úì Pseudo rempli avec le s√©lecteur: ${selector}`, 'debug');
        } else if (action === 'click') {
          await element.click();
          log(`‚úì Cliqu√© sur: ${selector}`, 'debug');
        }
        return true;
      }
    } catch (err) {
      // Continuer avec le prochain s√©lecteur
    }
  }
  return false;
}

/**
 * Fonction principale de vote
 */
async function performVote() {
  const startTime = new Date();
  log(`üöÄ D√©marrage du vote ${TASK} pour ${PLAYER_NAME}`, 'info');
  await sendDiscordNotification(`üöÄ **D√©marrage vote ${TASK}**\nJoueur: ${PLAYER_NAME}`);

  let browser;
  
  try {
    // Lancer le navigateur
    browser = await chromium.launch({
      headless: HEADLESS,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    });
    
    const page = await context.newPage();
    
    // √âtape 1: Aller sur la page de vote
    log(`üìç Navigation vers ${configData.baseUrl}`, 'info');
    await page.goto(configData.baseUrl, { 
      waitUntil: 'networkidle',
      timeout: configData.timeouts.navigationMs 
    });
    
    // √âtape 2: Remplir le pseudo si pr√©sent
    const pseudoFilled = await tryMultipleSelectors(
      page, 
      configData.selectors.playerInputOnEvolu, 
      'fill'
    );
    
    if (pseudoFilled) {
      log('‚úì Pseudo rempli sur la page EvoluCraft', 'info');
    } else {
      log('‚ÑπÔ∏è Pas de champ pseudo trouv√© sur la page principale', 'debug');
    }
    
    // √âtape 3: Trouver et cliquer le bouton de vote
    let voteButtons = [];
    for (const selector of configData.selectors.voteButtonsOnEvolu) {
      const buttons = await page.$$(selector);
      voteButtons = voteButtons.concat(buttons);
    }
    
    if (voteButtons.length === 0) {
      throw new Error('Aucun bouton de vote trouv√© sur la page');
    }
    
    log(`üìä ${voteButtons.length} bouton(s) de vote trouv√©(s)`, 'debug');
    
    const buttonIndex = siteConfig.indexOnEvoluPage;
    if (buttonIndex >= voteButtons.length) {
      throw new Error(`Index ${buttonIndex} invalide (seulement ${voteButtons.length} boutons)`);
    }
    
    // Cliquer et attendre le nouvel onglet
    const [newPage] = await Promise.all([
      context.waitForEvent('page'),
      voteButtons[buttonIndex].click()
    ]);
    
    log('‚úì Bouton de vote cliqu√©, nouvel onglet ouvert', 'info');
    
    // √âtape 4: Traiter le site externe
    await newPage.waitForLoadState('networkidle', { 
      timeout: configData.timeouts.navigationMs 
    });
    
    const externalUrl = newPage.url();
    log(`üìç Navigation vers site externe: ${externalUrl}`, 'info');
    
    // Remplir le pseudo sur le site externe
    const externalPseudoFilled = await tryMultipleSelectors(
      newPage,
      configData.selectors.externalPlayerInputs,
      'fill'
    );
    
    if (externalPseudoFilled) {
      log('‚úì Pseudo rempli sur le site externe', 'info');
      await newPage.waitForTimeout(500); // Petite pause apr√®s remplissage
    }
    
    // Soumettre le vote
    const submitClicked = await tryMultipleSelectors(
      newPage,
      configData.selectors.externalSubmitButtons,
      'click'
    );
    
    if (!submitClicked) {
      throw new Error('Impossible de trouver le bouton de soumission');
    }
    
    log('‚úì Vote soumis', 'info');
    
    // Attendre le chargement de la r√©ponse
    await newPage.waitForLoadState('networkidle', {
      timeout: configData.timeouts.navigationMs
    });
    await newPage.waitForTimeout(configData.timeouts.idleAfterSubmitMs);
    
    // V√©rifier le r√©sultat
    const pageContent = await newPage.content();
    const pageText = await newPage.innerText('body');
    
    // D√©tection de captcha
    const captchaRegex = new RegExp(configData.captcha.detectRegex, 'i');
    if (captchaRegex.test(pageText)) {
      log('üõë CAPTCHA D√âTECT√â!', 'warn');
      await sendDiscordNotification(
        `üõë **CAPTCHA d√©tect√© sur ${TASK}**\n` +
        `URL: ${externalUrl}\n` +
        `Le bot va attendre ${configData.captcha.manualWaitMinutes} minutes pour r√©solution manuelle.`
      );
      
      // Pause pour r√©solution manuelle
      const waitMs = configData.captcha.manualWaitMinutes * 60 * 1000;
      log(`‚è∏Ô∏è Pause de ${configData.captcha.manualWaitMinutes} minutes pour r√©solution manuelle...`, 'info');
      await new Promise(resolve => setTimeout(resolve, waitMs));
      
      throw new Error('Captcha d√©tect√© - intervention manuelle requise');
    }
    
    // V√©rifier le succ√®s
    let voteSuccess = false;
    for (const successText of siteConfig.expectSuccess) {
      if (pageText.toLowerCase().includes(successText.toLowerCase())) {
        voteSuccess = true;
        log(`‚úÖ Vote r√©ussi! (texte trouv√©: "${successText}")`, 'success');
        break;
      }
    }
    
    if (!voteSuccess) {
      log('‚ö†Ô∏è Succ√®s non confirm√© - v√©rifier manuellement', 'warn');
      await sendDiscordNotification(
        `‚ö†Ô∏è **Vote ${TASK} - Succ√®s non confirm√©**\n` +
        `Joueur: ${PLAYER_NAME}\n` +
        `URL: ${externalUrl}\n` +
        `R√©ponse: ${pageText.substring(0, 200)}...`
      );
    } else {
      const duration = Math.round((new Date() - startTime) / 1000);
      await sendDiscordNotification(
        `‚úÖ **Vote ${TASK} r√©ussi!**\n` +
        `Joueur: ${PLAYER_NAME}\n` +
        `Dur√©e: ${duration}s`
      );
    }
    
  } catch (error) {
    log(`‚ùå Erreur: ${error.message}`, 'error');
    await sendDiscordNotification(
      `‚ùå **Erreur vote ${TASK}**\n` +
      `Joueur: ${PLAYER_NAME}\n` +
      `Erreur: ${error.message}`
    );
    throw error;
    
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Ex√©cution principale
(async () => {
  try {
    await performVote();
    log(`‚ú® Vote ${TASK} termin√© avec succ√®s`, 'success');
    process.exit(0);
  } catch (error) {
    log(`‚ùå √âchec du vote ${TASK}: ${error.message}`, 'error');
    process.exit(1);
  }
})();